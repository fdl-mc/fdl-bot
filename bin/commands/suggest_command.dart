import 'package:nyxx/nyxx.dart';
import 'package:nyxx_interactions/interactions.dart';

import '../utils/constants.dart';
import '../utils/instances.dart';
import '../utils/typedefs.dart';
import '../utils/utils.dart';

final suggestCommand = SlashCommandBuilder(
  'suggest',
  '–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é.',
  _suggestCommandOptions,
  guild: guildId,
)..registerHandler(_suggestCommandExecution);

final _suggestCommandOptions = [
  CommandOptionBuilder(
    CommandOptionType.string,
    '–∑–∞–≥–æ–ª–æ–≤–æ–∫',
    '–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–¥–µ–∏.',
    required: true,
  ),
  CommandOptionBuilder(
    CommandOptionType.string,
    '–æ–ø–∏—Å–∞–Ω–∏–µ',
    '–û–ø–∏—Å–∞–Ω–∏–µ –∏–¥–µ–∏.',
  ),
];

final CommandExecution _suggestCommandExecution = (event) async {
  final channel = await bot.fetchChannel<TextChannel>(suggestsChannelId);
  final title = event.interaction.getArg('–∑–∞–≥–æ–ª–æ–≤–æ–∫').value as String;
  final description = event.interaction.getArg('–æ–ø–∏—Å–∞–Ω–∏–µ') is InteractionOption
      ? event.interaction.getArg('–æ–ø–∏—Å–∞–Ω–∏–µ').value
      : null;
  print(description);

  final msg = await channel.sendMessage(
    MessageBuilder.embed(
      buildSuggestionEmbed(
        title: title,
        description: description,
        author: event.interaction.userAuthor!,
      ),
    ),
  );

  await event.respond(
    MessageBuilder.content('–ò–¥–µ—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!'),
    hidden: true,
  );

  await msg.createReaction(UnicodeEmoji('üëç'));
  await msg.createReaction(UnicodeEmoji('üëé'));

  await msg.createThread(ThreadBuilder('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏'));
};
